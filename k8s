kubeadm join 192.168.0.10:6443 --token xwdllc.zmdterof82wfrw7h \
	--discovery-token-ca-cert-hash sha256:62b6f2374c04445bca5fb1474bd5d1c9579c3028279f2a9fdcea1a756027c792 


kubeadm token create --print-join-command

#A useful link for k8s cluster creation with containerd using kubeadm 
https://devopsquare.com/how-to-create-kubernetes-cluster-with-containerd-90399ec3b810


sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --cri-socket /run/containerd/containerd.sock --control-plane-endpoint 10.10.10.100
sudo kubeadm join 172.16.4.90:6443 \
	--token 7i34jm.q8enu8wxvfic9s8k \
        --discovery-token-ca-cert-hash sha256:202117e62f133323eff707919ec512eef466a59a29454c4ee320a0626ff42c05 \
	--cri-socket /run/containerd/containerd.sock

#https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises
curl https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/calico.yaml -O
kubectl apply -f calico.yaml

# https://www.golinuxcloud.com/deploy-multi-node-k8s-cluster-rocky-linux-8/


###########################################################
#Steps by Sir Aareez Asif from https://youtu.be/OywF5oARYSI
###########################################################
#Step 1: Login with root user and Install Docker ( in Master & Worker Node Both)

Step 2:  Create a file with the name containerd.conf using the command:
vim /etc/modules-load.d/containerd.conf

And add the following lines:
overlay
br_netfilter

Step 3: Save the file and run the following commands:
modprobe overlay
modprobe br_netfilter

Step 4: Create a file with the name kubernetes.conf in /etc/sysctl.d folder:
vim /etc/sysctl.d/kubernetes.conf

Add the following lines in the file and Save it:
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

Step 5: Run the commands to verify the changes:
sysctl --system
sysctl -p

Step 6: Remove the config.toml file from /etc/containerd/ Folder and run reload your system daemon:
rm -f /etc/containerd/config.toml
systemctl daemon-reload

Step 7: Add Kubernetes Repository:
apt-get update && apt-get install -y apt-transport-https ca-certificates curl
curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

Step 8: Disable Swap
vim /etc/fstab    (Remove swap mount point from this file)
swapoff -a

Step 9: Export the environment variable:
export KUBE_VERSION=1.23.0

Step 10: Install Kubernetes:
apt-get update
apt-get install -y kubelet=${KUBE_VERSION}-00 kubeadm=${KUBE_VERSION}-00 kubectl=${KUBE_VERSION}-00 kubernetes-cni=0.8.7-00
apt-mark hold kubelet kubeadm kubectl
systemctl enable kubelet
systemctl start kubelet

Step 11: Now it's time to initialize our Cluster!
---MASTER NODE ONLY---
kubeadm init --kubernetes-version=${KUBE_VERSION} (Only on master node)
kubeadm token create --print-join-command (To regenrate the tokens)

Step 12:
cp /etc/kubernetes/admin.conf /root/
chown $(id -u):$(id -g) /root/admin.conf
export KUBECONFIG=/root/admin.conf
echo 'export KUBECONFIG=/root/admin.conf' >> /root/.bashrc

Step 13: Download the daemonset yaml file of required version like following link:
wget https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

Step 14: Now apply the daemonset yaml!
kubectl apply -f weave-daemonset-k8s.yaml
